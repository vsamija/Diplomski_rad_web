width = 6
)
),
fluidRow(
box(
title = "Cases per Country",
plotlyOutput("case_evolution_byCountry"),
fluidRow(
column(
uiOutput("selectize_casesByCountries"),
width = 3,
),
column(
checkboxInput("checkbox_logCaseEvolutionCountry", label = "Logarithmic Y-Axis", value = FALSE),
checkboxInput("checkbox_per100kEvolutionCountry", label = "Per Population", value = FALSE),
width = 3,
style = "float: right; padding: 10px; margin-right: 50px"
)
),
width = 6
),
box(
title = "Evolution of Cases since 10th/100th case",
plotlyOutput("case_evolution_after100"),
fluidRow(
column(
uiOutput("selectize_casesByCountriesAfter100th"),
width = 3,
),
column(
uiOutput("selectize_casesSince100th"),
width = 3
),
column(
checkboxInput("checkbox_logCaseEvolution100th", label = "Logarithmic Y-Axis", value = FALSE),
checkboxInput("checkbox_per100kEvolutionCountry100th", label = "Per Population", value = FALSE),
width = 3,
style = "float: right; padding: 10px; margin-right: 50px"
)
),
width = 6
)
)
body_overview <- dashboardBody(
tags$head(
tags$style(type = "text/css", "#overview_map {height: 48vh !important;}"),
tags$style(type = 'text/css', ".slider-animate-button { font-size: 20pt !important; }"),
tags$style(type = 'text/css', ".slider-animate-container { text-align: left !important; }"),
tags$style(type = "text/css", "@media (max-width: 991px) { .details { display: flex; flex-direction: column; } }"),
tags$style(type = "text/css", "@media (max-width: 991px) { .details .map { order: 1; width: 100%; } }"),
tags$style(type = "text/css", "@media (max-width: 991px) { .details .summary { order: 3; width: 100%; } }"),
tags$style(type = "text/css", "@media (max-width: 991px) { .details .slider { order: 2; width: 100%; } }")
),
fluidRow(
fluidRow(
uiOutput("box_keyFigures")
),
fluidRow(
class = "details",
column(
box(
width = 12,
leafletOutput("overview_map")
),
class = "map",
width = 8,
style = 'padding:0px;'
),
column(
uiOutput("summaryTables"),
class = "summary",
width = 4,
style = 'padding:0px;'
),
column(
sliderInput(
"timeSlider",
label      = "Select date",
min        = min(data_evolution$date),
max        = max(data_evolution$date),
value      = max(data_evolution$date),
width      = "100%",
timeFormat = "%d.%m.%Y",
animate    = animationOptions(loop = TRUE)
),
class = "slider",
width = 12
)
)
)
)
body_fullTable <- dashboardBody(
tags$head(
tags$style(type = "text/css", "@media (min-width: 768px) { .full-table { margin-top: -30px; } }")
),
fluidPage(
fluidRow(
h3(paste0("Complete Table (", strftime(current_date, format = "%d.%m.%Y"), ")"),
class = "box-title", style = "margin-top: 10px; font-size: 18px;"),
div(
dataTableOutput("fullTable"),
class = "full-table"
),
div(
tags$h5("Growth Rate Coloring", style = "margin-left: 10px;"),
tags$ul(class = "legend",
tags$li(tags$span(class = "pos1"), " 0 % to 10 %"),
tags$li(tags$span(class = "pos2"), "10 % to 20 %"),
tags$li(tags$span(class = "pos3"), "20 % to 33 %"),
tags$li(tags$span(class = "pos4"), "33 % to 50 %"),
tags$li(tags$span(class = "pos5"), "50 % to 75 %"),
tags$li(tags$span(class = "pos6"), "> 75 %"),
tags$br()
),
tags$ul(class = "legend",
tags$li(tags$span(class = "neg1"), " 0 % to 10 %"),
tags$li(tags$span(class = "neg2"), "10 % to 20 %"),
tags$li(tags$span(class = "neg3"), "20 % to 33 %"),
tags$li(tags$span(class = "neg4"), "> 33 %")
)
),
width = 12
)
)
)
source('C:/Users/valen/Desktop/COVID-19-Statistical-Analysis-Simulator-master/UI/ui_fullTable.R')
source('C:/Users/valen/Desktop/COVID-19-Statistical-Analysis-Simulator-master/UI/ui_fullTable.R')
body_fullTable <- dashboardBody(
tags$head(
tags$style(type = "text/css", "@media (min-width: 768px) { .full-table { margin-top: -30px; } }")
),
fluidPage(
fluidRow(
h3(paste0("Complete Table (", strftime(current_date, format = "%d.%m.%Y"), ")"),
class = "box-title", style = "margin-top: 10px; font-size: 18px;"),
div(
dataTableOutput("fullTable"),
class = "full-table"
),
div(
tags$h5("Growth Rate Coloring", style = "margin-left: 10px;"),
tags$ul(class = "legend",
tags$li(tags$span(class = "pos1"), " 0 % to 10 %"),
tags$li(tags$span(class = "pos2"), "10 % to 20 %"),
tags$li(tags$span(class = "pos3"), "20 % to 33 %"),
tags$li(tags$span(class = "pos4"), "33 % to 50 %"),
tags$li(tags$span(class = "pos5"), "50 % to 75 %"),
tags$li(tags$span(class = "pos6"), "> 75 %"),
tags$br()
),
tags$ul(class = "legend",
tags$li(tags$span(class = "neg1"), " 0 % to 10 %"),
tags$li(tags$span(class = "neg2"), "10 % to 20 %"),
tags$li(tags$span(class = "neg3"), "20 % to 33 %"),
tags$li(tags$span(class = "neg4"), "> 33 %")
)
),
width = 12
)
)
)
shiny::runApp()
runApp()
runApp()
shiny::runApp()
## YOU DELETED SOMETHING HERE
capFirst <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1, 1)), substring(s, 2),
sep = "", collapse = " ")
}
page_plots <- dashboardPage(
title = "Plots",
header = dashboardHeader(disable = TRUE),
sidebar = dashboardSidebar(disable = TRUE),
body = dashboardBody(fluidRow(fluidRow(uiOutput("box_caseEvolution"))))
)
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
body_about <- dashboardBody(
fluidRow(
fluidRow(
column(
box(
title = div("O projektu", style = "padding-left: 20px", class = "h2"),
column(
h3("The COVID-19 Statistical Analysis Simulator"),
"This dashboard demonstrates some recent news about the Coronavirus pandemic.
This App is a simulator, that reads from the John Hopkins dataset, and shows some data related to mortality,
recovery, infected, and etc..",
tags$br(),
h3("COVID-19 Social Distancing"),
"Please stay safe and respect social distancing, which can be tough on people and could disrupt the social and economic loop of life.C",
tags$br(),
width = 12
),
width = 6,
),
width = 12,
style = "padding: 15px"
)
)
)
)
page_about <- dashboardPage(
title = "About",
header = dashboardHeader(disable = TRUE),
sidebar = dashboardSidebar(disable = TRUE),
body = body_about
)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
# ---- Loading libraries ----
library("shiny")
library("shinydashboard")
library("tidyverse")
library("leaflet")
library("plotly")
library("DT")
library("fs")
library("wbstats")
source("utils.R", local = T)
downloadGithubData <- function() {
download.file(
url      = "https://github.com/CSSEGISandData/COVID-19/archive/master.zip",
destfile = "data/covid19_data.zip"
)
data_path <- "COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_"
unzip(
zipfile   = "data/covid19_data.zip",
files     = paste0(data_path, c("confirmed_global.csv", "deaths_global.csv", "recovered_global.csv")),
exdir     = "data",
junkpaths = T
)
}
updateData <- function() {
# Download data from Johns Hopkins (https://github.com/CSSEGISandData/COVID-19) if the data is older than 0.5h
if (!dir_exists("data")) {
dir.create('data')
downloadGithubData()
} else if ((!file.exists("data/covid19_data.zip")) || (as.double(Sys.time() - file_info("data/covid19_data.zip")$change_time, units = "hours") > 0.5)) {
downloadGithubData()
}
}
# Update with start of app
updateData()
# TODO: Still throws a warning but works for now
data_confirmed <- read_csv("data/time_series_covid19_confirmed_global.csv")
data_deceased  <- read_csv("data/time_series_covid19_deaths_global.csv")
# data_recovered <- read_csv("data/time_series_covid19_recovered_global.csv")
# Get latest data
current_date <- as.Date(names(data_confirmed)[ncol(data_confirmed)], format = "%m/%d/%y")
changed_date <- file_info("data/covid19_data.zip")$change_time
# Get evolution data by country
data_confirmed_sub <- data_confirmed %>%
pivot_longer(names_to = "date", cols = 5:ncol(data_confirmed)) %>%
group_by(`Province/State`, `Country/Region`, date, Lat, Long) %>%
summarise("confirmed" = sum(value, na.rm = T))
# data_recovered_sub <- data_recovered %>%
#   pivot_longer(names_to = "date", cols = 5:ncol(data_recovered)) %>%
#   group_by(`Province/State`, `Country/Region`, date, Lat, Long) %>%
#   summarise("recovered" = sum(value, na.rm = T))
data_deceased_sub <- data_deceased %>%
pivot_longer(names_to = "date", cols = 5:ncol(data_deceased)) %>%
group_by(`Province/State`, `Country/Region`, date, Lat, Long) %>%
summarise("deceased" = sum(value, na.rm = T))
data_evolution <- data_confirmed_sub %>%
full_join(data_deceased_sub) %>%
ungroup() %>%
mutate(date = as.Date(date, "%m/%d/%y")) %>%
arrange(date) %>%
group_by(`Province/State`, `Country/Region`, Lat, Long) %>%
mutate(
recovered = lag(confirmed, 14, default = 0) - deceased,
recovered = ifelse(recovered > 0, recovered, 0),
active = confirmed - recovered - deceased
) %>%
pivot_longer(names_to = "var", cols = c(confirmed, recovered, deceased, active)) %>%
ungroup()
# Calculating new cases
data_evolution <- data_evolution %>%
group_by(`Province/State`, `Country/Region`) %>%
mutate(value_new = value - lag(value, 4, default = 0)) %>%
ungroup()
rm(data_confirmed, data_confirmed_sub, data_recovered, data_recovered_sub, data_deceased, data_deceased_sub)
# ---- Download population data ----
population                                                            <- wb(country = "countries_only", indicator = "SP.POP.TOTL", startdate = 2018, enddate = 2020) %>%
select(country, value) %>%
rename(population = value)
countryNamesPop                                                       <- c("Brunei Darussalam", "Congo, Dem. Rep.", "Congo, Rep.", "Czech Republic",
"Egypt, Arab Rep.", "Iran, Islamic Rep.", "Korea, Rep.", "St. Lucia", "West Bank and Gaza", "Russian Federation",
"Slovak Republic", "United States", "St. Vincent and the Grenadines", "Venezuela, RB")
countryNamesDat                                                       <- c("Brunei", "Congo (Kinshasa)", "Congo (Brazzaville)", "Czechia", "Egypt", "Iran", "Korea, South",
"Saint Lucia", "occupied Palestinian territory", "Russia", "Slovakia", "US", "Saint Vincent and the Grenadines", "Venezuela")
population[which(population$country %in% countryNamesPop), "country"] <- countryNamesDat
# Data from wikipedia
noDataCountries <- data.frame(
country    = c("Cruise Ship", "Guadeloupe", "Guernsey", "Holy See", "Jersey", "Martinique", "Reunion", "Taiwan*"),
population = c(3700, 395700, 63026, 800, 106800, 376480, 859959, 23780452)
)
population      <- bind_rows(population, noDataCountries)
data_evolution <- data_evolution %>%
left_join(population, by = c("Country/Region" = "country"))
rm(population, countryNamesPop, countryNamesDat, noDataCountries)
data_atDate <- function(inputDate) {
data_evolution[which(data_evolution$date == inputDate),] %>%
distinct() %>%
pivot_wider(id_cols = c("Province/State", "Country/Region", "date", "Lat", "Long", "population"), names_from = var, values_from = value) %>%
filter(confirmed > 0 |
recovered > 0 |
deceased > 0 |
active > 0)
}
data_latest <- data_atDate(max(data_evolution$date))
top5_countries <- data_evolution %>%
filter(var == "active", date == current_date) %>%
group_by(`Country/Region`) %>%
summarise(value = sum(value, na.rm = T)) %>%
arrange(desc(value)) %>%
top_n(5) %>%
select(`Country/Region`) %>%
pull()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
top5_countries
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
top5_countries
top5_countries
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
View(data_evolution)
top5_countries <- data_evolution %>%
filter(var == "active", date == current_date) %>%
group_by(`Country/Region`) %>%
summarise(value = sum(value, na.rm = T)) %>%
arrange(desc(value)) %>%
top_n(5) %>%
select(`Country/Region`) %>%
pull()
# Učitavanje potrebnih biblioteka
library("shiny")
library("shinydashboard")
library("tidyverse")
library("leaflet")
library("plotly")
library("DT")
library("fs")
library("wbstats")
source("metode.R", local = T)
# Preuzimanje podataka (Johns Hopkins)
downloadGithubData <- function() {
download.file(
url      = "https://github.com/CSSEGISandData/COVID-19/archive/master.zip",
destfile = "data/covid19_data.zip"
)
data_path <- "COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_"
unzip(
zipfile   = "data/covid19_data.zip",
files     = paste0(data_path, c("confirmed_global.csv", "deaths_global.csv", "recovered_global.csv")),
exdir     = "data",
junkpaths = T
)
}
updateData <- function() {
# Preuzimanje podataka (Johns Hopkins) (https://github.com/CSSEGISandData/COVID-19) ako su stariji od pola sata. Dolje je prikazan kao "hours".
if (!dir_exists("data")) {
dir.create('data')
downloadGithubData()
} else if ((!file.exists("data/covid19_data.zip")) || (as.double(Sys.time()
- file_info("data/covid19_data.zip")$change_time, units = "hours") > 0.5)) {
downloadGithubData()
}
}
# Ažuriranje prilikom pokretanja aplikacije
updateData()
data_confirmed <- read_csv("data/time_series_covid19_confirmed_global.csv")
data_deceased  <- read_csv("data/time_series_covid19_deaths_global.csv")
data_recovered <- read_csv("data/time_series_covid19_recovered_global.csv")
# Prikupljanje najnovijih podataka
current_date <- as.Date(names(data_confirmed)[ncol(data_confirmed)], format = "%m/%d/%y")
changed_date <- file_info("data/covid19_data.zip")$change_time
# Razvoj slučajeva po državama
data_confirmed_sub <- data_confirmed %>%
pivot_longer(names_to = "date", cols = 5:ncol(data_confirmed)) %>%
group_by(`Province/State`, `Country/Region`, date, Lat, Long) %>%
summarise("confirmed" = sum(value, na.rm = T))
data_deceased_sub <- data_deceased %>%
pivot_longer(names_to = "date", cols = 5:ncol(data_deceased)) %>%
group_by(`Province/State`, `Country/Region`, date, Lat, Long) %>%
summarise("deceased" = sum(value, na.rm = T))
data_evolution <- data_confirmed_sub %>%
full_join(data_deceased_sub) %>%
ungroup() %>%
mutate(date = as.Date(date, "%m/%d/%y")) %>%
arrange(date) %>%
group_by(`Province/State`, `Country/Region`, Lat, Long) %>%
mutate(
recovered = lag(confirmed, 14, default = 0) - deceased,
recovered = ifelse(recovered > 0, recovered, 0),
active = confirmed - recovered - deceased
) %>%
pivot_longer(names_to = "var", cols = c(confirmed, recovered, deceased, active)) %>%
ungroup()
# Prikaz novih slučajeva
data_evolution <- data_evolution %>%
group_by(`Province/State`, `Country/Region`) %>%
mutate(value_new = value - lag(value, 4, default = 0)) %>%
ungroup()
rm(data_confirmed, data_confirmed_sub, data_recovered, data_recovered_sub, data_deceased, data_deceased_sub)
# Preuzimanje podataka vezanih uz stanovništvo
population <- wb(country = "countries_only", indicator = "SP.POP.TOTL", startdate = 2018, enddate = 2021) %>%
select(country, value) %>%
rename(population = value)
countryNamesPop <- c("Brunei Darussalam", "Congo, Dem. Rep.", "Congo, Rep.", "Czech Republic",
"Egypt, Arab Rep.", "Iran, Islamic Rep.", "Korea, Rep.", "St. Lucia", "West Bank and Gaza", "Russian Federation",
"Slovak Republic", "United States", "St. Vincent and the Grenadines", "Venezuela, RB")
countryNamesDat <- c("Brunei", "Congo (Kinshasa)", "Congo (Brazzaville)", "Czechia", "Egypt", "Iran", "Korea, South",
"Saint Lucia", "occupied Palestinian territory", "Russia", "Slovakia", "US", "Saint Vincent and the Grenadines", "Venezuela")
population[which(population$country %in% countryNamesPop), "country"] <- countryNamesDat
# Podaci s Wikipedije
noDataCountries <- data.frame(
country    = c("Cruise Ship", "Guadeloupe", "Guernsey", "Holy See", "Jersey", "Martinique", "Reunion", "Taiwan*"),
population = c(3700, 395700, 63026, 800, 106800, 376480, 859959, 23780452)
)
population      <- bind_rows(population, noDataCountries)
# Prikaz podataka od početka pandemije do trenutnog stanja
data_evolution <- data_evolution %>%
left_join(population, by = c("Country/Region" = "country"))
rm(population, countryNamesPop, countryNamesDat, noDataCountries)
data_atDate <- function(inputDate) {
data_evolution[which(data_evolution$date == inputDate),] %>%
distinct() %>%
pivot_wider(id_cols = c("Province/State", "Country/Region", "date", "Lat", "Long", "population"), names_from = var, values_from = value) %>%
filter(confirmed > 0 |
recovered > 0 |
deceased > 0 |
active > 0)
}
# Najnoviji podaci
data_latest <- data_atDate(max(data_evolution$date))
# Najzaraženije države (s najvećim brojem slučajeva)
top5_countries <- data_evolution %>%
filter(var == "active", date == current_date) %>%
group_by(`Country/Region`) %>%
summarise(value = sum(value, na.rm = T)) %>%
arrange(desc(value)) %>%
top_n(5) %>%
select(`Country/Region`) %>%
pull()
# Provjera
top5_countries
View(data_evolution)
View(data_evolution)
View(data_latest)
View(data_latest)
View(data_evolution)
View(data_evolution)
View(data_latest)
View(data_latest)
runApp()
shiny::runApp()
